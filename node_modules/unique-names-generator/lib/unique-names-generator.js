'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) 2018 AndreaSonny <andreasonny83@gmail.com> (https://github.com/andreasonny83)
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

var UniqueNamesGenerator = function () {
  function UniqueNamesGenerator(adjectives, colors, animals) {
    _classCallCheck(this, UniqueNamesGenerator);

    this.adjectives = adjectives;
    this.colors = colors;
    this.animals = animals;
  }

  _createClass(UniqueNamesGenerator, [{
    key: 'generate',
    value: function generate() {
      var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '-';

      if (!this.adjectives || !this.colors || !this.animals) {
        return null;
      }

      var adjective = this.adjectives[Math.floor(Math.random() * this.adjectives.length)];
      var color = this.colors[Math.floor(Math.random() * this.colors.length)];
      var animal = this.animals[Math.floor(Math.random() * this.animals.length)];

      return '' + adjective + separator + color + separator + animal;
    }
  }]);

  return UniqueNamesGenerator;
}();

module.exports = UniqueNamesGenerator;